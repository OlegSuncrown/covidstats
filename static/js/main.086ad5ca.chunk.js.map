{"version":3,"sources":["components/Chart.js","components/CountrySelector.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Chart","data","selectedCountry","useState","dailyData","setDailyData","fetchDailyData","url","a","fetch","response","json","useEffect","lineChart","length","className","labels","map","item","reportDate","datasets","confirmed","total","label","borderColor","fill","deaths","backgroundColor","i","lineChartPerDay","deltaConfirmed","BarChart","value","recovered","options","legend","display","title","text","CountrySelector","props","fetchCountries","setCountriesList","countries","name","defaultValue","onChange","e","handleChange","target","countriesList","country","key","Cards","start","end","duration","separator","Date","lastUpdate","toDateString","App","setData","setSelectedCountry","fetchData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.086ad5ca.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport {Line, Bar} from 'react-chartjs-2'\r\n\r\nfunction Chart({data, selectedCountry}) {\r\nconst [dailyData, setDailyData] = useState([])\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\nconst fetchDailyData = async (url) => {\r\n  const response = await fetch(`${url}/daily`)\r\n  const data = await response.json()\r\n  setDailyData(data)\r\n}\r\n\r\nuseEffect(() => {\r\n  fetchDailyData(url)\r\n}, [])\r\n\r\n\r\nconst lineChart = (\r\n  \r\n  dailyData.length  \r\n  ? (\r\n    <div className=\"shadow-sm p-3 mb-5 bg-white rounded\">\r\n      <Line \r\n        data={{\r\n        labels: dailyData.map((item) => item.reportDate),\r\n        datasets: [{\r\n          data: dailyData.map((item) => item.confirmed.total/1000),\r\n          label: 'Infected',\r\n          borderColor: 'blue',\r\n          fill: true,\r\n        }, {\r\n          data: dailyData.map((item) => item.deaths.total/100),\r\n          label: 'Deaths',\r\n          borderColor: 'red',\r\n          fill: true,\r\n          backgroundColor: 'rgba(255, 0, 0, 0.3)'\r\n        },\r\n        {\r\n          data: dailyData.map((item, i) => i > 0 ? item.deaths.total - dailyData[i - 1].deaths.total : item.deaths.total),\r\n          label: 'Deaths per day',\r\n          borderColor: 'red',\r\n          fill: true,\r\n          backgroundColor: 'rgba(255, 0, 0, 0.3)'\r\n        },\r\n      ]\r\n      }}\r\n      />\r\n    </div>\r\n  ) : (<div className=\"alert alert-primary\">no internet connection</div>)\r\n)\r\n\r\nconst lineChartPerDay = (\r\n  dailyData.length  \r\n  ? (\r\n    <div className=\"shadow-sm p-3 mb-5 bg-white rounded\">\r\n      <Line \r\n        data={{\r\n        labels: dailyData.map((item) => item.reportDate),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map((item) => item.deltaConfirmed/10),\r\n            label: 'infected per day (1:10)',\r\n            borderColor: 'blue',\r\n            fill: true,\r\n            //backgroundColor: 'green'\r\n          },\r\n        {\r\n          data: dailyData.map((item, i) => i > 0 ? item.deaths.total - dailyData[i - 1].deaths.total : item.deaths.total),\r\n          label: 'Deaths per day',\r\n          borderColor: 'red',\r\n          fill: true,\r\n          backgroundColor: 'rgba(255, 0, 0, 0.3)'\r\n        },\r\n      ]\r\n      }}\r\n      />\r\n    </div>  \r\n  ) : null\r\n)\r\n\r\nconst BarChart = (\r\n  \r\n  data.confirmed\r\n  \r\n  ? (\r\n    <Bar\r\n      data = {{\r\n        labels: ['Infected', 'Recovered', 'Deaths'],\r\n        datasets: [{\r\n          label: 'People',\r\n          backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n          data: [data.confirmed.value, data.recovered.value, data.deaths.value]\r\n          }\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${selectedCountry}` },\r\n      }}\r\n    />\r\n  ) : null\r\n)\r\n//data: [data.confirmed.value, data.recovered.value, data.deaths.value]\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"text-center\">\r\n      <h1>Chart</h1>\r\n      {selectedCountry ? BarChart : lineChart}\r\n      <h1>Daily chart</h1>\r\n      {lineChartPerDay}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nfunction CountrySelector(props) {\r\n//const [focus, setFocus] = useState('0')\r\n\r\nconst url = 'https://covid19.mathdro.id/api/countries'\r\nconst fetchCountries = async (url) => {\r\n  const response = await fetch(url)\r\n  const data = await response.json()\r\n  props.setCountriesList(data.countries.map(item => item.name))\r\n  //console.log(data.countries.map(item => item.name))\r\n}\r\n\r\nuseEffect(() => {\r\n  fetchCountries(url)\r\n}, [])\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n\r\n    <div className=\"input-group mb-3 col-md-6\">\r\n    \r\n    <select className=\"custom-select \" defaultValue='' onChange={(e) => {props.handleChange(e.target.value)}}>\r\n    \r\n      <option  value=''>Choose...</option>\r\n      {props.countriesList.map((country, i) => {\r\n        return(\r\n          <option className=\"\" key={i} value={country}>{country}</option>\r\n        )\r\n      })}\r\n    </select>\r\n  </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CountrySelector\r\n","import React from 'react'\r\nimport CountUp from 'react-countup';\r\n\r\nfunction Cards({data}) {\r\n\r\n  if(!data.confirmed){\r\n    return(\r\n      null\r\n    )\r\n  }\r\n\r\n  return (\r\n  <div className=\"\">\r\n \r\n      <div className=\"card-deck \">\r\n\r\n        <div className=\"card shadow-sm\" >\r\n          <div className=\"card-body \" >\r\n            <h6 className=\"card-title text-muted\">Infected</h6>\r\n              <CountUp start={0} end={data.confirmed.value} duration={2.5} separator=\",\"/>\r\n              <br/>\r\n              <div className=\"text-muted mt-1\">\r\n              {new Date(data.lastUpdate).toDateString()}\r\n              </div>\r\n              <div className=\"mt-1\"><small>Number of active cases of COVID-19.</small></div>\r\n          </div>\r\n          <div className=\"card-footer bg-info\">\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"card shadow-sm\" >\r\n          <div className=\"card-body \" >\r\n            <h6 className=\"card-title text-muted\">Recovered</h6>\r\n              <CountUp start={0} end={data.recovered.value} duration={2.5} separator=\",\"/>\r\n              <br/>\r\n              <div className=\"text-muted mt-1\">\r\n              {new Date(data.lastUpdate).toDateString()}\r\n              </div>\r\n              <div className=\"mt-1\"><small>Number of recoveries from COVID-19.</small></div>\r\n          </div>\r\n          <div className=\"card-footer bg-success\">\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"card shadow-sm\" >\r\n        <div className=\"card-body \" >\r\n          <h6 className=\"card-title text-muted\">Recovered</h6>\r\n            <CountUp start={0} end={data.deaths.value} duration={2.5} separator=\",\"/>\r\n            <br/>\r\n            <div className=\"text-muted mt-1\">\r\n            {new Date(data.lastUpdate).toDateString()}\r\n            </div>\r\n            <div className=\"mt-1\"><small>Number of deaths caused by COVID-19.</small></div>\r\n        </div>\r\n        <div className=\"card-footer bg-danger\">\r\n        </div>\r\n      </div>\r\n      \r\n      </div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Cards\r\n","import React, { useState, useEffect} from 'react';\nimport Chart from './components/Chart'\nimport CountrySelector from './components/CountrySelector'\nimport Cards from './components/Cards'\n\nfunction App() {\n\nconst [data, setData] = useState({})\nconst [countriesList, setCountriesList] = useState([])\nconst [selectedCountry, setSelectedCountry] = useState('')\n\nconst url = 'https://covid19.mathdro.id/api'\n\nconst fetchData = async (url) => {\n  let response\n  if(selectedCountry){\n    response = await fetch(`${url}/countries/${selectedCountry}`)\n  } else {\n    response = await fetch(url)\n  }\n  //const response = await fetch(url)\n  const data = await response.json()\n  const {confirmed, recovered, deaths, lastUpdate} = data\n  const modifiedData = {\n    confirmed,\n    recovered,\n    deaths,\n    lastUpdate,\n  }\n  setData(modifiedData)\n}\n\nconst handleChange = (country) => {\n  setSelectedCountry(country)\n}\n\nuseEffect(() => {\n  fetchData(url)\n}, [selectedCountry])\n\n  return (\n    <div className=\"container-flex bg-light p-2\">\n      \n      \n      <h1 className=\"text-center display-3 mt-3 font-weight-bold\">COVID-19</h1>\n      <h3 className=\"text-center text-primary font-weight-bold\">Corona tracker</h3>\n      <div className=\"row mb-5 mt-3\">\n        <div className=\"col-lg-8 mx-auto\">\n          <Cards \n          data={data}\n          />\n        </div>\n      </div>\n\n      <CountrySelector\n        setCountriesList={setCountriesList} \n        countriesList={countriesList}\n        handleChange={handleChange}\n      />\n     \n        <div className=\"row\">\n          <div className=\"col-lg-2\">\n          </div>\n     \n          <div className=\"col-lg-8\">\n            <Chart \n              data={data}\n              selectedCountry={selectedCountry}\n            />\n          </div>\n    \n        </div>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}